//*****************************************************************
//ALGORITMO:  ARBOL DE BUSQUEDA BINARIO
//Autor: Victor Hugo Rios Rebollar
//Escuela Superior de Computo-IPN
//Fecha: 25/03/2021
//Compilacion: "gcc abb.c tiempo.c -o abb"(LINUX)
//Ejecucion: "./abb n"(LINUX)
//Ejecucion shell: ./abb.sh(LINUX)
//*****************************************************************

//*****************************************************************
//LIBRERIAS INCLUIDAS
//*****************************************************************
#include <stdio.h>
#include <stdlib.h>
//*****************************************************************
//DEFINICION DE CONSTANTES DEL PROGRAMA
#define REGISTROS 10000000
#define LIMITE 50 // limite de caracteres leidos por linea del archivo de 10 millones de numeros

//*****************************************************************
//*****************************************************************
//DEFINICION DE ESTRUCTURAS DEL PROGRAMA
struct node {
    int key;
    struct node *left, *right;
};
//*****************************************************************
//DEFINICION DE VARIABLES GLOBALES
int *numeros,*arreglo;  //variable apuntador para reservar memoria
static int contadorPosicion = 0; //almcaena la posicion donde se almacenara el dato dentro del arreglo ordenado
//*****************************************************************
//*****************************************************************
//DEFINICION DE FUNCIONES DEL PROGRAMA
// A utility function to create a new BST node
struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
 
// A utility function to do inorder traversal of BST
void inorder(struct node* root)
{ 
    if (root != NULL) {
        inorder(root->left);
		//printf("%d",root->key);
		*(arreglo+contadorPosicion)=root->key;//llena la posicion contadorPosicion con el valor del nodo en el que se encuentra
		contadorPosicion++;
        inorder(root->right);
    }
}

struct node* insert(struct node* node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == NULL)
        return newNode(key);
 
    /* Otherwise, recur down the tree */
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
 
    /* return the (unchanged) node pointer */
    return node;
}
// A iterative binary search function. It returns
// location of x in given array arr[l..r] if present,
// otherwise -1
int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r) {
        int m = l + (r - l) / 2;
  	//printf("M: %d\n",m);
        // Check if x is present at mid
        
        if (arr[m] == x){
            return m;
            }
  
        // If x greater, ignore left half
        if (arr[m] < x){
            l = m + 1;
            }
  
        // If x is smaller, ignore right half
        else{
            r = m - 1;
            }
    }
  
    // if we reach here, then element was
    // not present
    return -1;
}
int main(int argc, char *argv[])
{
	double utime0, stime0, wtime0, utime1, stime1, wtime1;  //Variables para medicion de tiempos
	FILE* fichero; 										    //puntero a fichero
	char cadena[LIMITE];                                    //cadena auxiiar para leer linea a linea los registros del archivo
	fichero = fopen("numeros10millones.txt", "rt");         //apertura del archivo de 10 millones
	struct node* root = NULL;
	int arreglo2[20] = {322486, 14700764, 3128036, 6337399, 61396, 10393545, 2147445644, 1295390003, 450057883, 187645041, 1980098116, 152503, 5000, 1493283650, 214826, 1843349527, 1360839354, 2109248666 , 2147470852, 0};
    int i,n,nMedio;
    if (argc != 2)
	{
		printf("\nIndique el tamanio del algoritmo - Ejemplo: [user@equipo]$ %s 100\n", argv[0]);
		exit(1);
	}
	
	//Tomar el segundo argumento como tamaÃ±o del algoritmo
	n = atoi(argv[1]);
	numeros=(int*)malloc(n*sizeof(int));
	arreglo=(int*)malloc(n*sizeof(int));
	if(numeros!=NULL){
		for(i=0;i<n;i++){//realiza las iteraciones hasta n veces ingresado como parametro del programa en la ejecucion
			fgets (cadena,LIMITE, fichero);//lectura linea a linea del archivo txt
			*(numeros+i)=atoi(cadena); //asignacion de la variable temporal cadena a las posiciones del arreglo
			root = insert(root,*(numeros+i));//llenamos el arbol con los numeros del arreglo(sin ordenar)
		}
	}else
		exit(1);
		
    
    	nMedio = (n/2);
 
 	//Para poder ordenar el arreglo de n numeros que se requiere imprimimos inorden el arbol y vamos añadiendo a un arreglo extra 
 	
 	inorder(root);
 	
 	
 	//Comprobar ordenamiento de los 10millones por medio del arbol
 	//for(i=0;i<n;i++){
 	//	printf("%d\n",*(arreglo+i));
	//}
 	
 	//******************************************************************
	//Iniciar el conteo del tiempo para las evaluaciones de rendimiento
	//******************************************************************
	uswtime(&utime0, &stime0, &wtime0);
	
	
    //******************************************************************
	//Inicio del algoritmo
	//******************************************************************
    
    	for(i=0;i<20;i++){
    	int result = binarySearch(arreglo, 0, nMedio-1,*(arreglo2+i));
    	(result == -1) ? printf("Elemento no encontrado\n"): printf("Elemento encontrado en la posicion %d\n",result);
		
	}
 	//******************************************************************
	//Fin del algoritmo
	
	
	
	//******************************************************************
	//Evaluar los tiempos de ejecucion
	//******************************************************************
    uswtime(&utime1, &stime1, &wtime1);	
    return 0;
}
